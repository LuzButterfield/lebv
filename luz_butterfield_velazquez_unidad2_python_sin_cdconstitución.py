# -*- coding: utf-8 -*-
"""Luz BUTTERFIELD VELAZQUEZ - Unidad2_Python_sin_CdConstitución.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SbgUBAD36MuvT7mNwvo9_IWjs2WhrD-e

# ***PROGRAMACIÓN PYTHON***

---

# **UNIDAD 2 - Lazos e iteraciones.**

---
## Ejecución condicional: if, elif y else.

Como en cualquier lenguaje de programación, las estructuras de control en Python permiten cambiar el flujo de ejecución de los programas.

La palabra reservada *if* permite direccionar el flujo de ejecución
del programa dependiendo de que alguna condición puede ser
verdadera o falsa.

La sintaxis es la siguiente: 

**if** *condición*:

> *acción1*

> *accion2*

> ...

> *accionM*


Como ejemplo práctico, hay que realizar un programa que resuelva ecuaciones de primer grado.
"""

#! /usr/bin/python
from math import sqrt

# mostramos un mensaje de bienvenida
print('¡Hola! Vamos a resolver una ecuación de segundo grado:')
print('    ax² + bx + c = 0\n')

# pedimos los coeficientes al usuario
a, b, c = [float(input(f'Dame el coeficiente {coef}: ')) for coef in ('a', 'b', 'c')]

# calculamos el discriminante
discriminante =  b * b - 4 * a * c

if discriminante < 0: # comprobamos si no existen soluciones reales
    print(f'La ecuación no tiene soluciones reales.')
else:
    raiz = sqrt(discriminante)      # calculamos la raíz
    x_1 = (-b + raiz) / (2 * a)     # calculamos una primera solución
    if discriminante != 0:          # comprobamos si hay otra solución
        x_2 = (-b - raiz) / (2 * a) # calculamos la segunda solución
        print(f'Las soluciones son {x_1} y {x_2}.') # mostramos las dos soluciones
    else:
        print(f'La única solución es x = {x_1}') # mostramos la única solución

"""Para corregirlo se añadirán condiciones if para evaluar las posibles condiciones en las que puede incurrir el código. Probarlo con valores positivos, negativos, a en cero y b en cero.

**NOTA:** Observe las tabulaciones que están dentro de las condiciones if.
"""

numero = int(input("Escriba un número positivo: "))
if numero < 0:
    print("¡Le he dicho que escriba un número positivo!")
print(f"Ha escrito el número {numero}")

"""Si es necesario ejecutar acciones distintas cuando la evaluación
de la condición sea verdadera o falsa. Se puede utilizar la
palabra reservada *else*.
"""

edad = int(input("¿Cuántos años tiene? "))
if edad < 18:
    print("Es usted menor de edad")
else:
    print("Es usted mayor de edad")
print("¡Hasta la próxima!")

"""También es posible crear estructuras condicionales múltiples con la palabra reservada *elif*."""

edad = int(input("¿Cuántos años tiene? "))
if edad < 0:
    print("No se puede tener una edad negativa")
elif edad >= 0 and edad < 18:
    print("Es usted menor de edad")
else:
    print("Es usted mayor de edad")

"""### Operador ternario.

En Python existen también el operador ternario, se trata de una clúsula *if - else* que se define dentro de una sola línea, incluso puede ser utilizada dentro de un print(). La estructura es la siguiente:

*`[código si se cumple] if [condición] else [código si no se cumple]`*


"""

x = 43
result = "es la respuesta" if x == 42  else "le anduviste cerca"

result # contendrá  ‘le anduviste cerca’

"""También se puede utilizar para asignar valores a variables:"""

x = 43
result = "es la respuesta" if x == 42  else "le anduviste cerca"

result # contendrá  ‘le anduviste cerca’

"""

---


## Iteraciones: while, for.


### Ciclo for.

Este ciclo se caracteriza por tener un número de iteraciones definido de antemano. No tiene un candición de paro , más bien contiene un *iterable* que define las veces que se ejecutará el código. El siguiente ejemplo representa un ciclo representa un contador:"""

print("Comienzo")
for i in [0, 1, 2]:
    print("Hola ", end="")
print()
print("Final")

"""### Iterables e iteradores

Los **iterables** son aquellos objetos que como su nombre indica pueden ser iterados, lo que dicho de otra forma es, que puedan ser indexados. Si piensas en una`list`, podemos indexarlo con `lista[1]` por ejemplo, por lo que sería un iterable. Algunos ejemplos son: listas, tuplas, cadenas o diccionarios.

Los **iteradores** son objetos que hacen referencia a un elemento, y que tienen un método `next` que permite hacer referencia al siguiente.

El ciclo for es capaz de recorrer los objetos iterables mediante la siguiente sintaxis:

```
for <variable> in <iterable>:
    <Código>
```

Para saber si un objeto es iterable, se puede usar la función `isinstance()`:
"""

x = isinstance(5, int)
print(x)

"""La función `iter()` puede ser llamada desde un objeto que sea iterable y retorna un iterador, que es una variable que hace referencia al objeto iterable original y permite acceder a sus elementos con `next()`. Cuando coimienza, el iterador apunta afuera de la lista, y no hace referencia al primer elemento hasta que se llema a `next()` por primera vez."""

x = iter(["manzana", "platano", "cereza"])
print(next(x))
print(next(x))
print(next(x))

"""Existen iteradores para diferentes clases:

`str_iterator` para cadenas.

`list_iterator` para listas.

`tuple_iterator` para tuplas.

`set_iterator` para sets.

`dict_keyiterator` para diccionarios.

El ciclo for, como ya se mencionó anteriormente, permite recorrer objetos iterables, ejemplos:
"""

for i in [0, 1, 2]:
    for j in [0, 1]:
        print(f"i vale {i} y j vale {j}")



"""La función `range()` genera una secuencia de números que van desde 0 por defecto hasta el número que se pasa como parámetro menos 1. En realidad, se pueden pasar hasta tres parámetros separados por coma, donde el primer es el inicio de la secuencia, el segundo el final y el tercero el salto que se desea entre números. Por defecto se empieza en 0 y el salto es de 1:

`range(inicio, fin, salto)`
"""

for i in [1, 2, 3]:
    for j in range(i):
        print(f"i vale {i} y j vale {j}")



"""Los ciclos `for` también pueden anidarse, como en cualquier lenguaje de programación:"""

for i in [1, 2, 3]:
    for j in [11, 12]:
        print(j, end=" ")
print(i, end=" ")

"""## Ciclo while

EL ciclo while repetirá las sentencias dentro de él, mientras se cumpla la condición especificada.
"""

i = 1
while i <= 3:
    print(i)
    i += 1
print("Programa terminado")

"""También es posible escribir ciclos while en una sóla línea."""

i = 1
while i < 6:
  print(i)
  i += 1

"""También permite recorrer algún elemento iterable mientras existan elementos en él, por ejemplo, una lista y en cada iteración se va eliminando un dato:

https://www.codigopiton.com/

https://pythondiario.com/2014/04/listas-en-python.html
https://programminghistorian.org/es/lecciones/manipular-cadenas-de-caracteres-en-python#multiplicar
https://www.mclibre.org/consultar/python/lecciones/python-elementos.html


"""



"""En Python, es posible mezclar la palabra reservada `else`, con el `while`. Servirá para ejecutar código una vez que el ciclo allá terminado normalmente:"""



"""Como el ciclo `while` ejecuta las sentencias en su interior cuando la condición es verdadera, se deberá tener cuidado de no generar ciclos infinitos, a menos que sea requerido por el programa a realizar. El siguiente ejemplo es válido, pero ocasionará que el programa quedé "colgado" infinitamente:
```
while True:
  print("hola")
```

## Modificación de ciclos.

`Break` permite detener la ejecución del ciclo. Una vez que el interprete encuentre la palabra, el ciclo terminará, sin embargo se puede considerar que es un final forzado.

Se puede utilizar tanto con ciclos `for` y `while`. Comúnmente se usa para establecer una condición de parada del ciclo y así evitar consumir ciclos de reloj de la computadora:
"""



i = 1
while i <= 50:
    print(i)
    i = 3 * i + 1
print("Programa terminado")

"""El siguiente ejemplo muestra como un ciclo infinito se puede detener con una condición y un sentencia `break`:"""

i = 1
while i <= 10:
    print(i, end=" ")
    break

"""Si `break` se encuentra dentro de ciclos anidados, únicamente detendŕa el ciclo en el que se encuentra:"""

for num in range(10):
    if num == 5:
        print ("Se cumple la condición que finaliza el bucle ")
        break
    print(f" El número actual es {num}")
print("Continuamos tras el bucle")

"""La otra sentencia que permite modificar los ciclos en Python es la palabra reservada `continue`. Ésta permite que dentro de un ciclo se "salte" las líneas posteriores a donde se encuentra, haciendo que el ciclo continue su ejecución en la siguiente iteración:"""

for num in range(10):
    if num == 5:
        continue
    print(f"El número actual es {num}")
print("Continuamos con el bucle")

"""Como se puede observar, si bien se brinco el `print()`, únicamente no lo ejecuta en esa iteración, siendo que en las demás se ejecuta normalmente.

Un ejemplo con `while`:
"""

contador = 0
limite = 10
while contador < limite:
    print(contador)
    contador += 1

"""***COMPARTE TUS REFLEXIONES DE LOS TEMAS VISTOS ANTERIORMENTE.***

https://www.mclibre.org/consultar/python/lecciones/python-listas.html#listas-recorrer página con muy buen contenido________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
https://www.mclibre.org/consultar/python/

https://www.codigopiton.com/
________________________________________________________________________________
"""